@page "/profile"
@using System.Security.Claims
@using Blazored.LocalStorage
@using Rentbook.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject NotificationService NotificationService
<PageTitle>Profile Page</PageTitle>

<RadzenCard Style="max-width: 800px; margin: auto; margin-top: 20px;">
    <RadzenText TextStyle="TextStyle.H3">User Profile</RadzenText>

    @if (isLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else if (profileData != null)
    {
        <div class="rz-p-4">
            <RadzenStack Spacing="2">
                <RadzenCard class="rz-background-color-primary-lighter rz-p-4">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H5">
                            @($"{profileData.FirstName} {profileData.LastName}")
                        </RadzenText>
                        <RadzenText>
                            <RadzenIcon Icon="email" class="rz-mr-2" />
                            @profileData.Email
                        </RadzenText>
                        <RadzenText>
                            <RadzenIcon Icon="phone" class="rz-mr-2" />
                            @profileData.PhoneNumber
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>

                <RadzenText TextStyle="TextStyle.H6" class="rz-mt-4">Houses</RadzenText>

                @if (profileData.Houses?.Any() == true)
                {
                    <div class="rz-p-2">
                        @foreach (var house in profileData.Houses)
                        {
                            <RadzenCard class="rz-my-2">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    <RadzenIcon Icon="home" />
                                    <RadzenText>@house.Address</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </div>
                }
                else
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true">
                        No houses found.
                    </RadzenAlert>
                }

                <RadzenButton Click="@EditProfile"
                              Text="Edit Profile"
                              ButtonStyle="ButtonStyle.Primary"
                              class="rz-mt-4" />
            </RadzenStack>
        </div>
    }
    else
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            Unable to load profile data. Please try again later.
        </RadzenAlert>
    }
</RadzenCard>

@code {
    private ProfileData profileData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            using var httpClient = HttpClientFactory.CreateClient("API");
            httpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            profileData = await httpClient.GetFromJsonAsync<ProfileData>("api/profile/get");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load profile data");
            Console.WriteLine($"Error fetching profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditProfile()
    {
        NavigationManager.NavigateTo("/edit-profile");
    }

    private class ProfileData
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public List<House> Houses { get; set; }
    }

    private class House
    {
        public string Address { get; set; }
    }
}