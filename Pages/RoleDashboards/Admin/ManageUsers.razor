@page "/manage-users"
@attribute [Authorize(Roles = "Admin")]
@inject UserService UserService
@inject IJSRuntime JSRuntime




<div class="row mt-4">
    <div class="col-md-12">
        <h3>Manage Users</h3>
        @if (users == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => EditUser(user.Id)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<User> users;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetUsersAsync();
    }

    private async Task EditUser(string id)
    {
        var user = await UserService.GetUserAsync(id);
        // Implement edit logic here, e.g., open a modal or navigate to an edit page
    }

    private async Task DeleteUser(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
        {
            await UserService.DeleteUserAsync(id);
            await LoadUsers(); // Reload the user list
        }
    }
}